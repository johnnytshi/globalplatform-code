******************************************************
Title    : GlobalPlatform
Authors  : Karsten Ohme <k_o_@users.sourceforge.net>
License  : See file COPYING.LESSER
Requires : PC/SC Lite http://www.musclecard.com/ (for UNIXes)
           OpenSSL http://www.openssl.org/
           zlib http://www.zlib.net/
******************************************************

This is a library for providing access to OpenPlatform 2.0.1' and
GlobalPlatform 2.1.1 conforming smart cards.

You need also the libraries zlib 1.2.3 (zlib1.dll in Windows) and OpenSSL >= 0.9.8e
(libeay32.dll and ssleay32.dll in Windows) or compatible.

------------------

If you experience problems a DEBUG output is always helpful.
Set the variable GLOBALPLATFORM_DEBUG=1 in the environment. You can set
the logfile with GLOBALPLATFORM_LOGFILE=<file>. Under Windows by
default C:\Temp\GlobalPlatform.log is chosen. The log file must be
writable for the user. The default log file under Unix systems is
/tmp/GlobalPlatform.log. But usually syslog is available and this will
be used by default, so you may have to specify the log file manually,
if you don't have access to the syslog or don't want to use it.
Keep in mind that the debugging output may contain sensitive information,
e.g. keys!

------------------

If you compile this on your own:

Compilation under Unix
----------------------

You must have CMake installed. http://www.cmake.org/ 
This can be obtained in standard Unix distributions over the integrated package system.

On a command line type:

cd \path\to\globalplatform
cmake .
make
make install

FreeBSD
-------

Under FreeBSD the pcsc-lite libraries are not detected automatically. So you have to specify the locations:

cmake -DPCSC_INCLUDE_DIRS=/usr/local/include -DPCSC_LIBRARIES=/usr/local/lib/libpcsclite.so

You also have to patch the PCSC sources under /usr/local/include/PCSC. 
You have to replace the <> with "" for the includes. 
See the compilation errors and fix the mentioned locations.

Compilation under Windows
-------------------------

-- Requirements --

Tested with:

* Visual Studio 2013 Community Edition
* VISUAL C++ 2010 EXPRESS

**** VISUAL C++ 2010 EXPRESS ****
To have nmake install VISUAL C++ 2010 EXPRESS
http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express

**** Visual Studio 2013 Community Edition ****
https://www.visualstudio.com/downloads/download-visual-studio-vs

**** SDK ****
Microsoft Windows SDK for Windows 7 and .NET Framework 4 
http://msdn.microsoft.com/en-us/windows/bb980924

If the setup fails look at http://blogs.msdn.com/b/windowssdk/archive/2009/09/16/windows-7-sdk-setup-common-installation-issues-and-fixes.aspx 
and http://support.microsoft.com/kb/2717426. You have to install VC 2010 first to have the document explorer. 
It might be necessary to remove the newer Microsoft Visual C++ 2010 x86 Redistributable and Microsoft Visual C++ 2010 x64 Redistributable 
of VC 2010 because they are conflict with the SDK.

Note: You might a newer version depending on your Windows version, e.g. for Windows 10:
https://dev.windows.com/en-us/downloads/windows-10-sdk

**** Windows Driver Kit (WDK) - Only needed for platform independend builts ****
The WDK is needed to build a Windows platform independent version without getting into conflict with different
Windows msvcrt DLL versions.
http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=36a2630f-5d56-43b5-b996-7633f2ec14ff

See http://kobyk.wordpress.com/2007/07/20/dynamically-linking-with-msvcrtdll-using-visual-c-2005/

**** OpenSSL ****
http://www.slproweb.com/products/Win32OpenSSL.html
--> Win32 OpenSSL v1.0.1c or higher , not a "light" version
--> Visual C++ 2008 Redistributables might be necessary
  * Let it install the DLLs to the Windows system directory

**** zlib ****
http://www.winimage.com/zLibDll/index.html
--> zlib pre-built DLL and sources, version 1.2.5
http://www.zlib.net/
--> to get current sources of zlib, version 1.2.8, the sources from the pre-built 
DLL and source (v 1.2.5) will not work, don't take the DLL from here

  * Copy the zlibwapi.dll to C:\Windows\System32 (dll32 version)
  
**** VISUAL C++ 2010 EXPRESS ****
  * Copy zlib.h and zconf.h from the sources of zlib to
    C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Include
  * Copy the file "zlibwapi.lib" from the lib directory to
    C:\Program Files (x86)\Microsoft SDKs\Windows\v7.0A\Lib

	**** Visual Studio 2013 Community Edition ****
	
  * Copy zlib.h and zconf.h from the sources of zlib to
	C:\Program Files (x86)\Windows Kits\8.1\Include\um
  * Copy the file "zlibwapi.lib" from the lib directory to
    C:\Program Files (x86)\Windows Kits\8.1\Lib\winv6.3\um\x86
	
Note: The paths given here are workign only with VC 2010 or VC 2013 respectively. 
This path must be adjusted. When the command prompt of visual studio is open execute "set" and look for an 
environment variable "WindowsSdkDir". This value should be taken instead as serach path for the right 
sub directories.

**** Doxygen ****
You need Doxygen for generating the documentation.
www.doxygen.org/ 
    
**** CMake ****
http://www.cmake.org/
--> CMake 2.8.10.2 or higher

**** Compile ****

  * Launch Visual Studio Command Prompt (VS 2010) or Developer Command Prompt for VS2013 (VS 2013)
  * cd \path\to\globalplatform

  * cmake -G "NMake Makefiles" for a debug version
  * cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release for a release version  
  * ## CMake looks for PC/SC, OpenSSL and zlib ##
  
  If you get and error "Error 'LINK : fatal error LNK1123: failure during conversion to COFF" 
  copy C:\Windows\Microsoft.NET\Framework\v4.0.30319\cvtres.exe to C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\BIN\cvtres.exe
  See http://stackoverflow.com/questions/10888391/error-link-fatal-error-lnk1123-failure-during-conversion-to-coff-file-inval    

  * nmake  
   
  * To build it downwards compatible you have to use a different set of common 
    runtime libraries contained in the Windows Driver Development Kit. You have
    to specify with -DWINDDK_DIR the path to the DDK.  
  * Complete example:
    cmake -G "NMake Makefiles" -DWINDDK_DIR=C:\WinDDK\7600.16385.1 -DCMAKE_BUILD_TYPE=Release
    nmake     

  * Done! 
  
  * If you want to have Visual Studio project files run
    cmake -G "Visual Studio 10"
    You ight have to remove the CMakeCache.txt before.    
	
***** Troubleshooting

Problem:

unzip.c.obj : error LNK2019: unresolved symbol "_inflate@8" in function "_unzReadCurrentFile@12".

Solution:

If the zlib library is not in place or the zlib library was added only after executing 
cmake -G "NMake Makefiles" the make file does not contain the correct path.

Problem:

No verbose output for error detection is shown.

Solution:

    nmake VERBOSE=1
	
Problem:

CMake Error: Error: generator : NMake Makefiles
Does not match the generator used previously: Visual Studio 10 2010
Either remove the CMakeCache.txt file and CMakeFiles directory or choose a diffe
rent binary directory.

Solution:

Delete liek mentioned CMakeCache.txt


Problem:

NMAKE : fatal error U1077: return code '0xc0000135'

Solution:

If you are updating from a previous Visual Studio Version the old compilation settings and 
paths might be still stored in old files. Remove the CMakeFiles directory and all *.cmake files, 
the Makefile and CMakeCache.txt.



Source Packages
---------------

Execute:

make/nmake package_source

Binary Packages
---------------

Execute:

make/nmake package 

Documentation
-------------

For documentation you also must have Doxygen installed.

Execute:

cmake .
make/nmake doc

Ubuntu/Debian packages
----------------------

You must also have dput, pbuilder and debhelper installed.

Execute:

cmake .
make package_ubuntu

The script ubuntu-package.sh iterates over all Ubuntu series and creates dsc files for Debian package creation or Launchpad uploads.

---

You can also upload the automatically created sources.changes to Launchpad. You must be registered there and you must have a .dput.cf in place. Follow the instructions on https://help.launchpad.net/Packaging/PPA/Uploading

Execute:

make dput

If you have used the ubuntu-package.sh script you must manually upload the source.changes files.

Execute:

dput gpsnapshots-ppa libglobalplatform6_6.1.0-0ubuntu1SNAPSHOT20120520195953+0200~precise.changes

---

You can create a Ubuntu/Debian package from a dsc file.

Execute:

dpkg-source -x libglobalplatform6_6.1.0-0ubuntu1SNAPSHOT20120520195953+0200~precise.dsc
cd libglobalplatform6-6.1.0
fakeroot debian/rules binary

CMake Issues
------------ 

You must rebuild the build system if your build tools have changed. Otherwise 
CMake uses outdated values. You have to delete manually 
the CMakeCache.txt file (and maybe also the CMakeLists directory and 
cmake_install.cmake).

If your are using Cygwin and you have installed the GNU compiler tools and the
bin directory is on the PATH environment variable CMake will favor these tools 
and the linking step will fail. So remove the Cygwin bin directory from the path.  

------------------

Testing is only supported under Linux for now. To generate the tests execute:

cmake -DTESTING=ON
make
make tests

For the unit tests a JCOP v2.2 41 card is used.

------------------

For more information contact the author through the mailing list at:

http://sourceforge.net/projects/globalplatform/

